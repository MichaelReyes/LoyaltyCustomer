package ph.com.gs3.loyaltycustomer.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltycustomer.models.sqlite.dao.Promo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROMO".
*/
public class PromoDao extends AbstractDao<Promo, Long> {

    public static final String TABLENAME = "PROMO";

    /**
     * Properties of entity Promo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Required_points = new Property(2, Integer.class, "required_points", false, "REQUIRED_POINTS");
        public final static Property Required_visit_count = new Property(3, Integer.class, "required_visit_count", false, "REQUIRED_VISIT_COUNT");
        public final static Property Created_at = new Property(4, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Update_at = new Property(5, java.util.Date.class, "update_at", false, "UPDATE_AT");
        public final static Property Is_active = new Property(6, Integer.class, "is_active", false, "IS_ACTIVE");
    };


    public PromoDao(DaoConfig config) {
        super(config);
    }
    
    public PromoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROMO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"REQUIRED_POINTS\" INTEGER," + // 2: required_points
                "\"REQUIRED_VISIT_COUNT\" INTEGER," + // 3: required_visit_count
                "\"CREATED_AT\" INTEGER," + // 4: created_at
                "\"UPDATE_AT\" INTEGER," + // 5: update_at
                "\"IS_ACTIVE\" INTEGER);"); // 6: is_active
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROMO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Promo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer required_points = entity.getRequired_points();
        if (required_points != null) {
            stmt.bindLong(3, required_points);
        }
 
        Integer required_visit_count = entity.getRequired_visit_count();
        if (required_visit_count != null) {
            stmt.bindLong(4, required_visit_count);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(5, created_at.getTime());
        }
 
        java.util.Date update_at = entity.getUpdate_at();
        if (update_at != null) {
            stmt.bindLong(6, update_at.getTime());
        }
 
        Integer is_active = entity.getIs_active();
        if (is_active != null) {
            stmt.bindLong(7, is_active);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Promo readEntity(Cursor cursor, int offset) {
        Promo entity = new Promo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // required_points
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // required_visit_count
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // created_at
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // update_at
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // is_active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Promo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRequired_points(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRequired_visit_count(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCreated_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdate_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIs_active(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Promo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Promo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package ph.com.gs3.loyaltycustomer.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltycustomer.models.sqlite.dao.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION".
*/
public class TransactionDao extends AbstractDao<Transaction, Long> {

    public static final String TABLENAME = "TRANSACTION";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Transaction_number = new Property(1, String.class, "transaction_number", false, "TRANSACTION_NUMBER");
        public final static Property Store_id = new Property(2, Long.class, "store_id", false, "STORE_ID");
        public final static Property Store_name = new Property(3, String.class, "store_name", false, "STORE_NAME");
        public final static Property Customer_id = new Property(4, Long.class, "customer_id", false, "CUSTOMER_ID");
        public final static Property Amount = new Property(5, Float.class, "amount", false, "AMOUNT");
        public final static Property Total_discount = new Property(6, Float.class, "total_discount", false, "TOTAL_DISCOUNT");
        public final static Property Transaction_date = new Property(7, java.util.Date.class, "transaction_date", false, "TRANSACTION_DATE");
    };


    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRANSACTION_NUMBER\" TEXT," + // 1: transaction_number
                "\"STORE_ID\" INTEGER," + // 2: store_id
                "\"STORE_NAME\" TEXT," + // 3: store_name
                "\"CUSTOMER_ID\" INTEGER," + // 4: customer_id
                "\"AMOUNT\" REAL," + // 5: amount
                "\"TOTAL_DISCOUNT\" REAL," + // 6: total_discount
                "\"TRANSACTION_DATE\" INTEGER);"); // 7: transaction_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String transaction_number = entity.getTransaction_number();
        if (transaction_number != null) {
            stmt.bindString(2, transaction_number);
        }
 
        Long store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindLong(3, store_id);
        }
 
        String store_name = entity.getStore_name();
        if (store_name != null) {
            stmt.bindString(4, store_name);
        }
 
        Long customer_id = entity.getCustomer_id();
        if (customer_id != null) {
            stmt.bindLong(5, customer_id);
        }
 
        Float amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(6, amount);
        }
 
        Float total_discount = entity.getTotal_discount();
        if (total_discount != null) {
            stmt.bindDouble(7, total_discount);
        }
 
        java.util.Date transaction_date = entity.getTransaction_date();
        if (transaction_date != null) {
            stmt.bindLong(8, transaction_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // transaction_number
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // store_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // store_name
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // customer_id
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // total_discount
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // transaction_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransaction_number(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStore_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStore_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomer_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setTotal_discount(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setTransaction_date(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
